{"id":"index.js","dependencies":[{"name":"/Users/jelmnain/codebase/tests/purescript-template-2/package.json","includedInParent":true,"mtime":1587915874881},{"name":"./output/Main","loc":{"line":1,"column":19},"parent":"/Users/jelmnain/codebase/tests/purescript-template-2/index.js","resolved":"/Users/jelmnain/codebase/tests/purescript-template-2/output/Main/index.js"}],"generated":{"js":"var Main = require('./output/Main');\n\nfunction main() {\n  /*\n  Here we could add variables such as\n   var baseUrl = process.env.BASE_URL;\n   Parcel will replace `process.env.BASE_URL`\n  with the string contents of the BASE_URL environment\n  variable at bundle/build time.\n  A .env file can also be used to override shell variables\n  for more information, see https://en.parceljs.org/env.html\n   These variables can be supplied to the Main.main function.\n  However, you will need to change the type to accept variables, by default it is an Effect.\n  You will probably want to make it a function from String -> Effect ()\n  */\n  Main.main();\n} // HMR setup. For more info see: https://parceljs.org/hmr.html\n\n\nif (module.hot) {\n  module.hot.accept(function () {\n    main();\n  });\n}\n\nmain();"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"name":"Main","generated":{"line":1,"column":4},"source":"index.js","original":{"line":1,"column":4}},{"generated":{"line":1,"column":8},"source":"index.js","original":{"line":1,"column":8}},{"name":"require","generated":{"line":1,"column":11},"source":"index.js","original":{"line":1,"column":11}},{"generated":{"line":1,"column":18},"source":"index.js","original":{"line":1,"column":18}},{"generated":{"line":1,"column":19},"source":"index.js","original":{"line":1,"column":19}},{"generated":{"line":1,"column":34},"source":"index.js","original":{"line":1,"column":18}},{"generated":{"line":1,"column":35},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"name":"main","generated":{"line":3,"column":9},"source":"index.js","original":{"line":3,"column":9}},{"generated":{"line":3,"column":13},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":16},"source":"index.js","original":{"line":3,"column":17}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":4,"column":4}},{"name":"Main","generated":{"line":16,"column":0},"source":"index.js","original":{"line":20,"column":2}},{"name":"Main","generated":{"line":16,"column":2},"source":"index.js","original":{"line":20,"column":2}},{"generated":{"line":16,"column":6},"source":"index.js","original":{"line":20,"column":6}},{"name":"main","generated":{"line":16,"column":7},"source":"index.js","original":{"line":20,"column":7}},{"generated":{"line":16,"column":11},"source":"index.js","original":{"line":20,"column":2}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":21,"column":1}},{"generated":{"line":17,"column":2},"source":"index.js","original":{"line":23,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":24,"column":0}},{"name":"module","generated":{"line":20,"column":4},"source":"index.js","original":{"line":24,"column":4}},{"generated":{"line":20,"column":10},"source":"index.js","original":{"line":24,"column":10}},{"name":"hot","generated":{"line":20,"column":11},"source":"index.js","original":{"line":24,"column":11}},{"generated":{"line":20,"column":14},"source":"index.js","original":{"line":24,"column":0}},{"generated":{"line":20,"column":16},"source":"index.js","original":{"line":24,"column":16}},{"name":"module","generated":{"line":21,"column":0},"source":"index.js","original":{"line":25,"column":2}},{"name":"module","generated":{"line":21,"column":2},"source":"index.js","original":{"line":25,"column":2}},{"generated":{"line":21,"column":8},"source":"index.js","original":{"line":25,"column":8}},{"name":"hot","generated":{"line":21,"column":9},"source":"index.js","original":{"line":25,"column":9}},{"generated":{"line":21,"column":12},"source":"index.js","original":{"line":25,"column":2}},{"name":"accept","generated":{"line":21,"column":13},"source":"index.js","original":{"line":25,"column":13}},{"generated":{"line":21,"column":19},"source":"index.js","original":{"line":25,"column":2}},{"generated":{"line":21,"column":20},"source":"index.js","original":{"line":25,"column":20}},{"generated":{"line":21,"column":32},"source":"index.js","original":{"line":25,"column":32}},{"name":"main","generated":{"line":22,"column":0},"source":"index.js","original":{"line":26,"column":4}},{"name":"main","generated":{"line":22,"column":4},"source":"index.js","original":{"line":26,"column":4}},{"generated":{"line":22,"column":8},"source":"index.js","original":{"line":26,"column":8}},{"generated":{"line":23,"column":0},"source":"index.js","original":{"line":27,"column":3}},{"generated":{"line":23,"column":3},"source":"index.js","original":{"line":25,"column":2}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":28,"column":1}},{"name":"main","generated":{"line":26,"column":0},"source":"index.js","original":{"line":30,"column":0}},{"generated":{"line":26,"column":4},"source":"index.js","original":{"line":30,"column":4}}],"sources":{"index.js":"var Main = require('./output/Main');\n\nfunction main () {\n    /*\n    Here we could add variables such as\n\n    var baseUrl = process.env.BASE_URL;\n\n    Parcel will replace `process.env.BASE_URL`\n    with the string contents of the BASE_URL environment\n    variable at bundle/build time.\n    A .env file can also be used to override shell variables\n    for more information, see https://en.parceljs.org/env.html\n\n    These variables can be supplied to the Main.main function.\n    However, you will need to change the type to accept variables, by default it is an Effect.\n    You will probably want to make it a function from String -> Effect ()\n  */\n\n  Main.main();\n}\n\n// HMR setup. For more info see: https://parceljs.org/hmr.html\nif (module.hot) {\n  module.hot.accept(function () {\n    main();\n  });\n}\n\nmain();\n"},"lineCount":null}},"error":null,"hash":"9d0c844d7c86a12941c356c67eac9f8d","cacheData":{"env":{}}}